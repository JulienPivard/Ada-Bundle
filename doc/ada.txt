*ada.txt*         Ada Filetype Plugins                Last change: 2006 Apr 30


                    ADA FILETYPE PLUGINS REFERENCE MANUAL~

ADA                                                                   *ada.vim*

1. Syntax Highlighting          |ft-ada-syntax|
2. Plugin                       |ft-ada-plugin|
3. Omni Completion              |ft-ada-omni|
4. Gnat Compiler                |compiler-gnat|
5. Options                      |ada-options|
6. Exported Functions           |ft-ada-functions|
7. Exported Contants            |ada-options|
8. Extra Plugins                |ada-extra-plugins|

==============================================================================
1. Syntax Highlighting                                          *ft-ada-syntax*


This mode is designed for the 2005 edition of Ada ("Ada 2005"), which includes
support for objected-programming, protected types, and so on.  It handles code
written for the original Ada language ("Ada83", "Ada87", "Ada95") as well,
though code which uses Ada 2005-only keywords will be wrongly colored (such
code should be fixed anyway).  For more information about Ada, see
http://www.adapower.com.

The Ada mode handles a number of situations cleanly.

For example, it knows that the "-" in "-5" is a number, but the same character
in "A-5" is an operator.  Normally, a "with" or "use" clause referencing
another compilation unit is colored the same way as C's "#include" is colored.
If you have "Conditional" or "Repeat" groups colored differently, then "end
if" and "end loop" will be colored as part of those respective groups.

You can set these to different colors using vim's "highlight" command (e.g.,
to change how loops are displayed, enter the command ":hi Repeat" followed by
the color specification; on simple terminals the color specification
ctermfg=White often shows well).

There are several options you can select in this Ada mode.

To enable them, assign a value to the option.  For example, to turn one on:
   let ada_standard_types = 1
To disable them use ":unlet".  Example:
   unlet ada_standard_types = 1

You can just use ":" and type these into the command line to set these
temporarily before loading an Ada file.  You can make these option settings
permanent by adding the "let" command(s), without a colon, to your "~/.vimrc"
file.

Here are the Ada mode options:

Variable                 Action ~

Even on a slow (90Mhz) PC this mode works quickly, but if you find the
performance unacceptable, turn on ada_withuse_ordinary.

==============================================================================
2. Plugin                                       *ft-vim-indent* *ft-ada-plugin*

The ada plugin provides various support functions as well as indent setup for
needed to indent Ada source.

==============================================================================
3. Omni Completion                                               *ft-ada-omni*

The Ada omni-completions which uses tags database created by "gnat xref -v
>tags".

It is a lot simpler then the other omnicompletion plugins which is quite
helpfull if you plan to write your own.

NOTE: "gnat xref -v" is very tricky to use as it has almost no diagnostic
       output - If nothing is printed then usualy the parameters are wrong.
       Here some important tips:

1)  You need to compile your code first and use the "-aO" option to point to
    your .ali files.
2)  "gnat xref -v ../Include/adacl.ads" won't work - use  the "gnat xref -v
    -aI../Include adacl.ads" instead.
3)  "gnat xref -v -aI../Include *.ad?" won't work - use "cd ../Include" and
    then "gnat xref -v *.ad?"
4)  Project manager support is completely broken - don't even try "gnat xref
    -Padacl.gpr".
5)  VIM is faster when the tags file is sorted - use "sort --unique
    --ignore-case --output=tags tags" .
6)  Remember to insert "!_TAG_FILE_SORTED 2 %sort ui" as first line.

==============================================================================
4. Gnat Compiler                                               *compiler-gnat*

==============================================================================
5. Options                                        *ada-variable* *ada-options*

                                                        *g:ada_standard_types*
g:ada_standard_types    bool (true when exists)
                Highlight types in package Standard (e.g., "Float")

                                                          *g:ada_space_errors*
                                                  *g:ada_no_trail_space_error*     
                                                    *g:ada_no_tab_space_error*     
                                                         *g:ada_all_tab_usage*            
g:ada_space_errors       bool (true when exists)            
                Highlight extraneous errors in spaces ...
                g:ada_no_trail_space_error        
                    - but ignore trailing spaces at the end of a line
                g:ada_no_tab_space_error          
                    - but ignore tabs after spaces
                g:ada_all_tab_usage               
                    - highligt all tab use

                                                           *g:ada_line_errors* 
g:ada_line_errors         bool (true when exists)
                Highlight lines which are to long

                                                         *g:ada_rainbow_color*   
g:ada_rainbow_color       bool (true when exists)
                Use rainbow color for '(' and ')'. You need the
                rainbow_parenthsis for this to work

                                                               *g:ada_folding*   
g:ada_folding             bool (true when exists)
                Use folding for Ada sources.

                                                                *g:ada_abbrev* 
g:ada_abbrev              bool (true when exists)
                Add some abbrevs

                                                      *g:ada_withuse_ordinary*  
g:ada_withuse_ordinary    bool (true when exists)
                Show "with" and "use" as ordinary keywords (when used to
                reference other compilation units they're normally highlighted
                specially).

                                                         *g:ada_begin_preproc*      
g:ada_begin_preproc       bool (true when exists)
                Show all begin-like keywords using the coloring
                of C preprocessor commands.

                                                      *g:ada_extended_tagging*  
g:ada_extended_tagging    enum ('jump', 'list')
                use exteded tagging, two options are available 
                    'jump': use tjump to jump.
                    'list': add tags quickfix list.
                Normal tagging does not support function or operator
                overloading as this is available in C and tagging was
                originaly developed for C.

                                                       *g:ada_gnat_extensions*    
g:ada_gnat_extensions     bool (true when exists)
                 Support GNAT extensions.
                                               *g:ada_with_gnat_project_files*
g:ada_with_gnat_project_files    bool (true when exists)
                 Add gnat project file keywords

                                                      *g:ada_default_compiler*  
g:ada_default_compiler    string
                 set default compiler. Currently supported is 'gnat'

An "exists" type is a boolean is considered true when the variable is defined
and false when the variable is undefined. The value ti which the variable is
set makes no difference. 

==============================================================================
6. Exported Functions                                       *ft-ada-functions*
		
ada#Word([{line}, {col}])                                         *ada#Word()*
		return full name of Ada entity under the cursor (or at given
                line/column), stripping whitespace/newlines as necessary.

ada#List_Tag([{line}, {col}])                                 *ada#Listtags()*
                list all ocurencies of the Ada entity under the cursor (or at
                given line/column) inside the quick-fix window

ada#Jump_Tag ({ident}, {mode})                                *ada#Jump_Tag()*
                list all ocurencies of the Ada entity under the cursor (or at
                given line/column) in the tag jump list. Mode can either be
                'tjump' or 'stjump'.
     
==============================================================================
7. Exported Contants                                        *ft-ada-constants*

                                                              *g:AdaWordRegex*
g:AdaWordRegex          string
                Regular expression to search for ada words

                                                               *g:ada#Comment*
g:ada#Comment           string
                Regular expression to search for ada comments

                                                              *g:ada#Keywords*
g:ada#Keywords          list of dictionaries
                List of keywords, attributes etc. pp. in onmicompletion format

==============================================================================
8. Extra Plugins                                           *ada-extra-plugins*

You can optionaly install the following extra plugins. They work well with Ada
and enhance the ability of the Ada mode.:

backup.vim
        http://www.vim.org/scripts/script.php?script_id=1537
        Keeps as many backups as you like so you don't have to.

rainbow_parenthsis.vim
        http://www.vim.org/scripts/script.php?script_id=1561
        Very helpfull since Ada uses only '(' and ')'.

nerd_comments.vim
        http://www.vim.org/scripts/script.php?script_id=1218
        Excelent commenting and uncommenting support for allmost any
        programming language.

==============================================================================
vim: textwidth=78 nowrap tabstop=8 shiftwidth=4 softtabstop=4 expandtab
vim: filetype=help encoding=latin1
